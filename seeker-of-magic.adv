######################################
# Seeker of Magic
# Copyright © 2019 Garry Francis
######################################
start_at = room01
start_theme = my_theme
loading_screen = loading_screen

######################################
# game_information
######################################
game_information {
   game_name = Seeker of Magic
   game_version = 1.0.0
   uuid = d1179c4c-cbe5-11e9-a32f-2a2ae2dbcce4
   game_shortname = Cave of Magic
   written_by = Garry Francis
   year = 2019
   copyright_message = Copyright © 2019 Garry Francis
   short_synopsis = There's rumoured to be a treasure in The Cave of Magic. You must go there to find out if it's true.
}

######################################
# settings
######################################
settings {
   inventory_items_limit_var = max_carried
   enable_standard_all_behaviour = true
}

######################################
# booleans
######################################
booleans {
   has_eaten_worm : boolean "false";
   has_read_parchment : boolean "false";
   is_amusing : boolean "false";
   is_box_open : boolean "false";
   is_chest_closed : boolean "false";
   is_chest_locked : boolean "true";
   is_chest_open : boolean "false";
   is_chest_opened : boolean "false";
   is_door_created : boolean "false";
   is_door_opened : boolean "false";
   is_pouch_open : boolean "false";
   has_light_room06 : boolean_dynamic {(is_carried "burning_torch" || parent_of "burning_torch" == "room06")}
   has_light_room07 : boolean_dynamic {(is_carried "burning_torch" || parent_of "burning_torch" == "room07")}
}

######################################
# integers
######################################
integers {
   score : integer "0";
   turns : integer "0";
   max_carried : integer_const "5";
}

######################################
# strings
######################################

strings {
   header_score : string_dynamic {(score + "/20")}
}

######################################
# on_startup
######################################
on_startup {
   : print "^c^<Seeker of Magic<14>>\n^l^There's known to be a Cave of Magic deep in the forest of Bunglewood. The cave is not hard to find, but no one goes there for fear of being eaten by a troll. As no one's been there, no one knows what's in the cave. It's rumoured to contain treasure, but if it contains treasure, why isn't it called The Cave of Treasure?\nNo, you suspect that the cave contains magic. There's only one way to find out for sure and that's to go there...\n\n^ci^Press <Enter<13>> to start your quest";
   : press_any_key;
}

######################################
# locations
######################################
locations {
// Room 1: Shore of Lake
   room01 : location "You're on the <shore<13>> of a beautiful <lake<13>>." header = "Shore of Lake" {
      on_command {
         // Lake
         : match "examine lake" {
            : print "The <water<13>> looks very inviting. It's a pity you can't swim.";
            : done;
         }
         : match "enter lake;enter water;swim -" {
            : print "Glug, glug. You flounder about for a bit, then sink to the bottom of the <lake<13>>.\n<You have drowned!<10>>";
            : end_game;
         }
         : match "get lake" {
            : print {("You can't " + original_verb() + " that.")}
            : done;
         }
         // Shore
         : match "examine shore" {
            : print "The <water<13>> laps at the shore line.";
            : done;
         }
         : match "get shore" {
            : print {("You can't " + original_verb() + " that.")}
            : done;
         }
         // Water
         : match "examine water" {
            : print "It's crystal clear.";
            : done;
         }
         : match "drink water" {
            : print "Aaah, very refreshing.";
            : done;
         }
         : match "get water" {
            : print "It trickles through your fingers.";
            : done;
         }
         // Boat
         : match "examine boat" {
            : print "This is the rowing <boat<13>> that you used to row across the <lake<13>>. When you've found the magic you seek, you can enter it to row back home again.";
            : done;
         }
         : match "enter boat;board boat" {
            : if (is_carried "magic_scrolls") {
               : add var ="score" value = "5";
               : print "You enter the boat with the magic you sought.";
               : print "[[Your score has gone up by 5 points.]]";
               : print "<Congratulations. You've unlocked the secret of The Cave of Magic and stolen the magic scrolls.<8>>";
               : print {("You scored " + score + " points in " + turns + " turns.")}
#               : ask_bool {
#                  question = Would you like to see some amusing things to try next time you play the game?
#                  var = is_amusing
#               }
#               : if (is_amusing) {
#                  : print "Amusing stuff goes here.";
#               }
               : end_game;
            }
            : else {
               : print "You didn't come all this way to leave without the magic you seek.";
               : done;
            }
         }
         : match "row boat" {
            : print {("You'll have to enter the <boat<13>> before you can " + original_verb() + " it anywhere.")}
            : done;
         }
         // Miscellaneous
         : match "listen _" {
            : print "You hear the sound of <water<13>> lapping against the <shore<13>>.";
            : done;
         }
      }
   }

// Room 2: Forest Path
   room02 : location "You're on a forest <path<13>> that meanders through tall <trees<13>>." header = "Forest Path" {
      on_command {
         // Path
         : match "examine path" {
            : print "It winds its way north amongst the <trees<13>> and east towards the lake.";
            : done;
         }
         : match "get path" {
            : print {("You can't " + original_verb() + " that.")}
            : done;
         }
         // Trees
         : match "examine trees" {
            : print "There are all sorts of <trees<13>> here, but an apple <tree<13>> stands out from the rest.";
            : done;
         }
         : match "get trees" {
            : print {("You can't " + original_verb() + " those.")}
            : done;
         }
         // Tree
         : match "examine tree" {
            : print "It's an old apple <tree<13>> full of <apples<13>>.";
            : done;
         }
         : match "climb tree;climb up;climb u;u _" {
            : if (items_carried() > 0) {
               : print "You'll need both hands to climb the tree, so you'll have to drop your belongings first.";
               : done;
            }
            : else {
               : goto "room03";
               : redescribe;
            }
         }
         : match "get tree" {
            : print {("You can't " + original_verb() + " that.")}
            : done;
         }
         // Apples
         : match "examine apples" {
            : print "There are lots of them. Why not pick one?";
            : done;
         }
         : match "get apples" {
            : print "You can only take one.";
            : done;
         }
         // Miscellaneous
         : match "listen _" {
            : print "You hear the soft rustle of leaves blowing in the wind.";
            : done;
         }
      }
   }

// Room 3: Top of Apple Tree
   room03 : location "You're nestled amongst a tangle of tree <branches<13>> with <apples<13>> all around you." header = "Top of Apple Tree" {
      on_command {
         // Trees
         : match "examine trees" {
            : print "You can't see the other trees because of the tangle of <branches<13>>.";
            : done;
         }
         : match "get trees" {
            : print {("You can't " + original_verb() + " those.")}
            : done;
         }
         // Tree
         : match "examine tree" {
            : print "It's a tangle of <branches<13>>.";
            : done;
         }
         : match "climb tree;climb down;climb d;d -" {
            : if (items_carried() > 0) {
               : print "You'll need both hands to climb the tree, so you'll have to drop your belongings first.";
               : done;
            }
            : else {
               : goto "room02";
               : redescribe;
            }
         }
         : match "get tree" {
            : print {("You can't " + original_verb() + " that.")}
            : done;
         }
         // Branches
         : match "examine branches" {
            : print "They're full of <apples<13>>.";
            : done;
         }
         : match "get branches" {
            : print {("You can't " + original_verb() + " those.")}
            : done;
         }
         // Apples
         : match "examine apples" {
            : print "There are lots of them. Why not pick one?";
            : done;
         }
         : match "get apples" {
            : print {("You can only " + original_verb() + " one.")}
            : done;
         }
         // Miscellaneous
         : match "listen _" {
            : print "You hear the soft rustle of leaves blowing in the wind.";
            : done;
         }
      }
   }

// Room 4: Outside Cave
   room04 : location "You're standing outside a dark <cave<13>>.  You guess that this is the infamous Cave of Magic." header = "Outside Cave" {
      on_command {
      // Cave
         : match "examine cave;examine entrance" {
            : print "It looks dark inside.";
            : done;
         }
         : match "get cave;get entrance" {
            : print {("You can't " + original_verb() + " that.")}
            : done;
         }
         // Troll
         : match "examine troll" {
            : append "The <troll<13>> has tough, leathery skin covered in warts. He wears animal skins and ";
            : if (is_exists "pouch") {
               : append "not much else. ";
            }
            : else {
               : append "a <pouch<13>> around his waist. ";
            }
            : if (is_present "ugly_troll") {
               : print "He's apparently guarding the <entrance<13>> to the <cave<13>>.";
               : done;
            }
            : else {
               : print "He's fast asleep from a blow on the head.";
               : done;
            }
         }
         : match "answer troll" {
            : if (is_present "ugly_troll") {
               : print "He just gives you a blank look.";
               : done;
            }
            : else {
               : print "The <troll<13>> responds with a loud snore.";
               : done;
            }
         }
         : match "attack troll" {
            : if (is_present "ugly_troll") {
               : print "He fends off your attack. \"Me no time to play. Must guard cave while wizard away.\"";
               : done;
            }
            : else {
               : print "You bravely attack the sleeping <troll<13>>.";
               : done;
            }
         }
         : match "dance _" {
            : if (is_present "ugly_troll") {
               : print "The <troll<13>> laughs at your antics.";
               : done;
            }
         }
         : match "get troll" {
            : print "You can't be serious.";
            : done;
         }
         : match "give apple" {
            : if (is_present "ugly_troll" && is_carried "apple") {
               : drop quiet = "true";
               : print "He throws the apple on the ground in disgust. \"Me no chardonnay-sipping vegetable!\" I think he means vegetarian. \"You got real food? You got meat?\"";
               : done;
            }
         }
         : match "give branch" {
            : if (is_present "ugly_troll" && is_carried "dry_branch") {
               : drop quiet = "true";
               : print "He throws the branch on the ground. \"That not food. Not meat. Not tasty.\"";
               : done;
            }
         }
         : match "give knife" {
            : if (is_present "ugly_troll" && is_carried "sharp_knife") {
               : drop quiet = "true";
               : print "He throws the knife on the ground. \"That not food. Not meat. Not tasty.\"";
               : done;
            }
         }
         : match "give rock" {
            : if (is_present "ugly_troll" && is_carried "rock") {
               : drop quiet = "true";
               : print "He throws the rock on the ground. \"That not food. Not meat. Not tasty.\"";
               : done;
            }
         }
         : match "give worm" {
            : if (is_present "ugly_troll" && is_carried "giant_worm") {
               : destroy "giant_worm";
               : set_true "has_eaten_worm";
               : add var ="score" value = "5";
               : print "\"That all you got?\" He gobbles down the giant worm. \"Okay. You pass now.\"";
               : print "[[Your score has gone up by 5 points.]]";
               : done;
            }
         }
         : match "kiss troll" {
            : if (is_present "ugly_troll") {
               : print "He returns your affection with a big hug that almost breaks your ribs.";
               : done;
            }
            : else {
               : print "Fortunately for you, he can't return your affection while he's asleep.";
               : done;
            }
         }
         : match "show worm" {
            : if (is_present "ugly_troll" && is_carried "giant_worm") {
               : print "The <troll<13>> licks his lips. \"You not want? Me take.\"";
               : done;
            }
         }
         : match "show _" {
            : if (is_present "ugly_troll") {
               : print "The <troll<13>>'s not interested in that.";
               : done;
            }
         }
         : match "scream _" {
            : if (is_present "ugly_troll") {
               : print "The <troll<13>> jumps. \"What dat for?\"";
               : done;
            }
         }
         : match "sing _" {
            : if (is_present "ugly_troll") {
               : print "The <troll<13>> smiles and claps.";
               : done;
            }
         }
         : match "smell troll" {
            : if (is_present "ugly_troll") {
               : print "You take a whiff of the <troll<13>> and wish you hadn't. Phew!";
               : done;
            }
         }
         : match "stab troll" {
            : if (is_present "ugly_troll" && is_carried "sharp_knife") {
               : print "The <troll<13>> grabs the knife, picks something out of his teeth and hands it back to you. \"Ta.\"";
               : done;
            }
         }
         : match "talk troll" {
            : if (is_present "ugly_troll") {
               : if (has_eaten_worm) {
                  : print "\"Me still hungry\", says the <troll<13>>. \"You pass before me eat YOU.\"";
                  : done;
               }
               : else {
                  : print "\"Me hungry\", says the <troll<13>>. \"You got food?\"";
                  : done;
               }
            }
            : else {
               : print "The <troll<13>> is not very talkative, seeing as he's fast asleep.";
               : done;
            }
         }
         : match "throw rock" {
            : if (is_present "ugly_troll" && is_carried "rock") {
               : print "The <troll<13>> is watching you. He catches the rock and throws it back. \"This fun. Play more.\"";
               : done;
            }
         }
         : match "wake troll" {
            : if (is_present "ugly_troll") {
               : print "But he's not asleep.";
               : done;
            }
            : else {
               : print "Forget it. He'll be out for ages.";
               : done;
            }
         }
      }
   }

// Room 5: Inside Cave
   room05 : location "You're standing just inside the <entrance<13>> to the <cave<13>>. Sunlight filters in from the south, but it's too dark to venture any further inside without a light. You can see the <troll<13>> outside the entrance." header = "Inside Cave" {
      on_command {
         // Cave entrance
         : match "examine cave" {
            : print "The darkness inside looks creepy.";
            : done;
         }
         : match "examine entrance" {
            : print "The light outside looks warm and inviting.";
            : done;
         }
         // Troll
         : match "examine troll" {
            : if (is_exists "ugly_troll") {
               : print "He has his back to you.";
               : done;
            }
            : else {
               : print "He's lying on the ground.";
               : done;
            }
         }
         : match "get troll" {
            : print "He's too far away.";
            : done;
         }
         : match "throw rock" {
            : if (is_carried "rock" && is_exists "ugly_troll") {
               : create "rock" target = "room04";
               : swap o1 = "ugly_troll" o2 = "sleeping_troll";
               : set_graphic graphic = "room04a" target = "room04" ;
               : print "You hit the <troll<13>> right slap bang in the back of the head and he goes down like a ton of bricks.";
               : done;
            }
         }
      }
   }

// Room 6: Deep Inside Cave
   room06 : location "You're deep inside the <cave<13>>. It looks like a dead end." header = "Deep Inside Cave" {
      on_command {
         // Cave
         : match "examine cave" {
            : print "It's dark. If it wasn't for your torch, you wouldn't be able to see a thing.";
            : done;
         }
         : match "get cave" {
            : print {("You can't " + original_verb() + " that.")}
            : done;
         }
         // Camp fire
         : match "examine fire" {
            : print "It looks like the remains of the troll's camp <fire<13>>. It's cold now. There's nothing left but <ashes<13>>.";
            : done;
         }
         // Ashes
         : match "examine ash" {
            : print "It's grey and powdery, just as you'd expect.";
            : done;
         }
         : match "examine ashes" {
            : print "They're grey and powdery, just as you'd expect.";
            : done;
         }
         : match "get ash;get ashes" {
            : print "The ashes sift through your fingers.";
            : done;
         }
         : match "search ash;search ashes;dig ash;dig ashes" {
            : if (is_exists "tin_box") {
               :print "You don't find anything else in the <ashes<13>>.";
               : done;
            }
            : else {
               : create "tin_box";
               : print "As you dig through the ashes, you find a tin <box<13>>.";
               : done;
            }
         }
         // Magic word
         : match "nothing -;say nothing" {
            : if (is_exists "outline" || is_exists "cave_door" || !has_read_parchment) {
               : print "You say \"nothing\" and nothing happens.";
               : done;
            }
            : else {
               : create "outline";
               : set_true "is_door_created";
               : set_graphic graphic = "room06a" target = "room06" ;
               : redescribe;
            }
         }
         // Cave door
         : match "examine outline;examine door" {
            : if (is_exists "outline") {
               : print "It looks like the <outline<13>> of a <door<13>> that's carved out of solid rock.";
               : done;
            }
            : if (is_exists "cave_door") {
               : print "It's a <door<13>> that's carved out of solid rock. It's currently open.";
               : done;
            }
         }
         : match "close door;pull door" {
            : if (is_exists "outline") {
               : print "It's already closed.";
               : done;
            }
            : if (is_exists "cave_door") {
               : print "There's no obvious way to close it.";
               : done;
            }
         }
         : match "open door;open outline" {
            : if (is_exists "outline") {
               : print "There's no obvious way to open it.";
               : done;
            }
            : if (is_exists "cave_door") {
               : print "It's already open.";
               : done;
            }
         }
         : match "push door;push outline" {
            : if (is_exists "outline") {
               : swap o1 = "outline" o2 = "cave_door";
               : add var ="score" value = "5"; 
               : set_true "is_door_opened";
               : set_graphic graphic = "room06b" target = "room06" ;
               : redescribe;
            }
            : if (is_exists "cave_door") {
               : print "It's already open.";
               : done;
            }
         }
      }
   }

// Room 7: Treasure Room
   room07 : location "This is the treasure room, the object of your quest." header = "Treasure Room" {
      on_command {
         // Treasure chest
         : match "examine chest" {
            : append "It's a solid timber <chest<13>> with tarnished brass bands holding it together. ";
            : if (is_chest_open) {
               : if (has_not_created "magic_scrolls") {
                  : print "It contains a stack of old <scrolls<13>>.";
                  : done;
               }
               : else {
                  : print "It's empty.";
                  : done;
               }
            }
            : else {
               : print "It's currently closed.";
               : done;
            }
         }
         : match "close chest" {
            : if (!is_chest_open) {
               : print "It's already closed.";
               : done;
            }
            : set_false "is_chest_open";
            : set_true "is_chest_closed";
            : set_graphic graphic = "room07" target = "room07" ;
            : redescribe;
         }
         : match "lock chest" {
            : if (is_chest_locked) {
               : print "It's already locked.";
               : done;
            }
            : if (is_chest_open) {
               : print "You'll have to close it first.";
               : done;
            }
            : if (is_carried "silver_key") {
               : set_true "is_chest_locked";
               : print "You lock the <chest<13>> with the silver key.";
               : done;
            }
            : else {
               : print "You'll need a key or something to lock it.";
               : done;
            }
         }
         : match "open chest" {
            : if (is_chest_locked) {
               : print "It's locked.";
               : done;
            }
            : if (is_chest_open) {
               : print "It's already open.";
               : done;
            }
            : set_true "is_chest_open";
            : set_true "is_chest_opened";
            : set_graphic graphic = "room07a" target = "room07" ;
            : redescribe;
         }
         : match "unlock chest" {
            : if (is_chest_locked) {
               : if (is_carried "silver_key") {
                  : set_false "is_chest_locked";
                  : print "You unlock the <chest<13>> with the silver key.";
                  : done;
               }
               : else {
                  : print "You'll need a key or something to unlock it.";
                  : done;
               }
            }
            : else {
               : print "It's already unlocked.";
               : done;
            }
         }
         // Lock
         : match "examine lock" {
            : if (is_chest_locked) {
               : print "It's locked.";
               : done;
            }
            : else {
               : print "It's unlocked.";
               : done;
            }
         }
      }
   }
}

######################################
# connections
######################################
connections {
   from, direction, to = [
      room01, west, room02,
      room02, north, room04,
      room03, down_oneway, room02,
      room04, north, room05,
      room05, north, room06,
      room06, north, room07,
   ]
}

######################################
# objects
######################################
objects {
// Scenery
   camp_fire : scenery "a camp fire" start_at = "room06";
   cave_door : scenery "cave door";
   outline : scenery "the outline of a door";
   rowing_boat : scenery "a rowing boat" start_at = "room01";
   sleeping_troll : scenery "a sleeping troll";
   treasure_chest : scenery "a treasure chest" start_at = "room07";
   ugly_troll : scenery "an ugly troll" start_at = "room04";

// Movable objects
   apple : object "an apple";
   burning_torch : object "a burning torch";
   dry_branch : object "a dry branch" start_at = "room02";
   flint : object "a flint"; 
   giant_worm : object "a giant worm";
   magic_scrolls : object "the magic scrolls";
   parchment : object "a parchment";
   pouch : object "a pouch" wearable = "true" ;
   rock : object "a rock" start_at = "room05";
   sharp_knife : object "a sharp knife" start_at = "inventory";
   silver_key : object "a silver key";
   tin_box : object "a tin box";
}

######################################
# barriers
######################################
barriers {
   block_door : block_path {
      from = room06
      to = room07
      block_when_not_exists = cave_door
      message = You can't go that way.
      show_blocked_exit = false
   }
   block_entrance : block_path {
      from = room04
      to = room05
      block_when_not = has_eaten_worm
      message = The <troll<13>> steps in front of you. "You no pass."
      show_blocked_exit = true
   }
   block_room05_to_room06 : block_path {
      from = room05
      to = room06
      block_when_not = has_light_room06
      message = It's too dark to go that way. You'll need a light.
      show_blocked_exit = true
   }
   block_room06_to_room07 : block_path {
      from = room06
      to = room07
      block_when_not = has_light_room07
      message = It's too dark to go that way. You'll need a light.
      show_blocked_exit = true
   }
   block_room07_to_room06 : block_path {
      from = room07
      to = room06
      block_when_not = has_light_room06
      message = It's too dark to go that way. You'll need a light.
      show_blocked_exit = true
   }
}

######################################
# vocabulary
######################################
vocabulary {
   // Verbs
   : verb / aliases = [answer, ask, question, tell]
   : verb / aliases = [attack, destroy, fight, kick, kill, murder, punch, thump]
   : verb / aliases = [climb, scale]
   : verb / aliases = [close, shut]
   : verb / aliases = [cut, chop, slice]
   : verb / aliases = [drink, sip, swallow]
   : verb / aliases = [drop, discard, place, put]
   : verb / aliases = [eat, consume, taste]
   : verb / aliases = [examine, check, describe, inspect, watch, x]
   : verb / aliases = [extinguish, unlight]
   : verb / aliases = [get, carry, hold, pick, purloin, steal, take]
   : verb / aliases = [give, offer]
   : verb / aliases = [go, run, walk]
   : verb / aliases = [hit, bash, crack, crash, smash, strike]
   : verb / aliases = [kiss, caress, embrace, hug]
   : verb / aliases = [jump, hop, skip]
   : verb / aliases = [light, burn]
   : verb / aliases = [listen, hear]
   : verb / aliases = [move, shift]
   : verb / aliases = [open, undo]
   : verb / aliases = [pull, drag]
   : verb / aliases = [push, force, heave, press, shove]
   : verb / aliases = [quit, q]
   : verb / aliases = [read, browse, scan]
   : verb / aliases = [remove, disrobe, doff, shed]
   : verb / aliases = [row, paddle]
   : verb / aliases = [say, utter]
   : verb / aliases = [scream, holler, shout, yell]
   : verb / aliases = [show, display, present]
   : verb / aliases = [sleep, nap, snooze]
   : verb / aliases = [smell, sniff]
   : verb / aliases = [swim, dive]
   : verb / aliases = [talk, speak]
   : verb / aliases = [touch, feel, fondle, grope]
   : verb / aliases = [throw, chuck, toss]
   : verb / aliases = [wake, arouse, awake, rouse]
   : verb / aliases = [wear, don]
   : verb / aliases = [xyzzy, abracadabra, plover, plugh, sesame, yoho]
   
   // Nouns
   : noun / aliases = [box, tin]
   : noun / aliases = [me, myself, self]
   : noun / aliases = [outline, crack]
   : noun / aliases = [rock, stone]
   : noun / aliases = [trees, forest]
}

######################################
# on_command
######################################
on_command {
// Self
   : match "examine me" {
      : print "You are Rowan of Bunglewood Downs, master thief and seeker of magic.";
      : done;
   }
// Sharp knife
   : match "examine knife" {
      : if (is_present "sharp_knife") {
         : print "It's an Elvish design with a sharp blade. You always keep it close at hand.";
         : done;
      }
   }
// Apple
   : match "examine apple" {
      : if (is_present "apple") {
         : print "It's a ripe red apple.";
         : done;
      }
      : if (is_at "room02" || is_at "room03") {
         : print "There are lots of them. Why not pick one?";
         : done;
      }
   }
   : match "get apple" {
      : if (is_at "room02" && !is_present "apple" && is_carried "dry_branch") {
        : print "You try to get one using the branch, but they're all out of reach.";
        : done;
      }
      : if (is_at "room02" && !is_present "apple") {
        : print "You try to get one, but they're all out of reach.";
        : done;
      }
      : if (is_at "room03" && is_exists "apple") {
        : print "Don't be greedy. You've already taken one.";
        : done;
      }
      : if (is_at "room03") {
        : pocket "apple";
        : print "You pick an <apple<13>> from one of the <branches<13>>.";
        : done;
      }
   }
   : match "drop apple" {
      : if (is_carried "apple" && is_at "room03") {
         : create "apple" target = "room02";
         : print "The <apple<13>> falls to the ground below.";
         : done;
      }
   }
   : match "eat apple" {
      : if (is_present "apple") {
         : destroy "apple";
         : print "Yum. Very tasty. Why not pick another one?";
         : done;
      }
   }
   : match "cut apple" {
      : if (is_carried "apple") {
         : if (is_carried "sharp_knife") {
            : if (has_not_created "giant_worm") {
               : swap o1 = "giant_worm" o2 = "apple";
               : print "Ooh, yuck. There's a giant <worm<13>> inside. It's lucky you didn't eat it. You throw the apple away, but keep the giant <worm<13>>. You never know. It may come in handy.";
               : done;
            }
            : else {
               : destroy "apple";
               : print "There's no worm in this one, so you eat the apple and throw the core away.";
               : done;
            }
         }
         : else {
            : print "You have nothing to cut it with.";
            : done;
         }
      }
   }
   : match "peel apple" {
      : if (is_present "apple") {
         : if (is_carried "sharp_knife") {
            : print "You're about to peel the apple, when you have second thoughts. If you don't eat it straight away, it will go brown. And if you eat it, it's better with the skin on, so that you get your daily fibre intake.";
            : done;
         }
         : else {
            : print "You have nothing to peel it with.";
            : done;
         }
      }
   }
// Dry branch
   : match "examine branch" {
      : if (is_present "dry_branch") {
         : print "It's shaped like a club and looks pretty dry.";
         : done;
      }
   }
   : match "light branch" {
      : if (is_present "dry_branch") {
         : if (is_carried "flint" && is_carried "rock") {
            : swap o1 = "dry_branch" o2 = "burning_torch";
            : add var ="score" value = "5"; 
            : print "You strike the flint with the rock until the sparks light the branch. It's now burning with a bright flame that makes a good <torch<13>>.";
            : print "[[Your score has gone up by 5 points.]]";
            : done;
         }
         : else {
            : print "You have nothing to light it with.";
            : done;
         }
      }
   }
   : match "cut branch;sharpen branch" {
      : if (is_present "dry_branch") {
         : if (is_carried "sharp_knife") {
            : print "You take a nick out of the branch, then have second thoughts. The branch may come in handy later.";
            : done;
         }
         : else {
            : print {("You don't have anything to " + original_verb() + " it with.")}
            : done;
         }
      }
   }
// Burning torch
   : match "examine torch" {
      : if (is_present "burning_torch") {
         : print "It's burning with a bright flame.";
         : done;
      }
   }
   : match "light torch" {
      : if (is_present "burning_torch") {
         : print "It's already lit.";
         : done;
      }
   }
   : match "extinguish torch" {
      : if (is_present "burning_torch") {
         : print "You'd better not. You might not be able to light it again.";
         : done;
      }
   }
// Worm
   : match "examine worm" {
      : if (is_present "giant_worm") {
         : print "It's a slimy, squirmy, yucky-looking thing. Lucky you didn't eat it.";
         : done;
      }
   }
   : match "eat worm" {
      : if (is_carried "giant_worm") {
        : print "You hold it up to your mouth, but can't bring yourself to swallow it.";
        : done;
      }
   }
// Pouch
   : match "examine pouch" {
      : if (is_present "pouch" || (is_at "room04" && has_not_created "pouch")) {
         : append "It's made of animal skin. The <pouch<13>> ";
         : if (is_pouch_open) {
            : if (is_exists "flint") {
               : print "is empty.";
               : done;
            }
            : else {
               : print "contains a <flint<13>>.";
               : done;
            }
         }
         : else {
            : print "is closed.";
            : done;
         }
      }
   }
   : match "get pouch" {
      : if (is_at "room04" && is_present "ugly_troll") {
         : print "\"Hands off. Dat's mine!\"";
         : done;
      }
      : if (is_at "room04" && has_not_created "pouch") {
         : if (items_carried() < item_limit()) {
            : pocket "pouch" ;
            : print "You pinch the <troll<13>>'s <pouch<13>>. He won't miss it while he's asleep.";
            : done;
         }
         : else {
            : print "You can't carry any more.";
            : done;
         }
      }
   }
   : match "open pouch" {
      : if (is_at "room04" && is_present "ugly_troll") {
         : print "\"Hands off. Dat's mine!\"";
         : done;
      }
      : if (is_present "pouch" || (is_at "room04" && has_not_created "pouch")) {
         : if (is_pouch_open) {
            : print "It's already open.";
            : done;
         }
         : set_true "is_pouch_open";
         : if (is_exists "flint") {
            : print "It's empty.";
            : done;
         }
         : else {
            : print "It contains a <flint<13>>.";
            : done;
         }
      }
   }
   : match "close pouch" {
      : if (is_at "room04" && is_present "ugly_troll") {
         : print "\"Hands off. Dat's mine!\"";
         : done;
      }
      : if (is_present "pouch" || (is_at "room04" && has_not_created "pouch")) {
         :if (is_pouch_open) {
            : set_false "is_pouch_open";
            : print "It's now closed.";
            : done;
         }
         : print "It's already closed.";
         : done;
      }
   }
// Flint
   : match "examine flint" {
      : if (is_present "flint" || (is_at "room04" && !is_present "pouch" && is_pouch_open && has_not_created "flint")) {
         : print "It's used for lighting fires.";
         : done;
      }
   }
   : match "get flint" {
      : if ((is_present "pouch" || (is_at "room04" && has_not_created "pouch")) && is_pouch_open && has_not_created "flint") {
         : if (items_carried() < item_limit()) {
               : pocket "flint";
               : print "You take the <flint<13>> out of the <pouch<13>>.";
               : done;
         }
         : else {
            : print "You can't carry any more.";
            : done;
         }
      }
   }
   : match "hit flint" {
      : if (is_present "flint" && is_carried "rock") {
         : if (is_present "dry_branch") {
            : swap o1 = "dry_branch" o2 = "burning_torch";
            : add var ="score" value = "5"; 
            : print "You strike the flint with the rock until the sparks light the branch. It's now burning with a bright flame that makes a good <torch<13>>.";
            : print "[[Your score has gone up by 5 points.]]";
            : done;
         }
         : else {
            : print "You strike the flint with the rock and it gives off sparks.";
            : done;
         }
      }
      : if (is_present "flint") {
         : print "You hit the flint with your hand. Ouch!";
         : done;
      }
   }
// Rock
   : match "examine rock" {
      : if (is_present "rock") {
         : print "It's about the size of a goose egg.";
         : done;
      }
   }
   : match "hit rock" {
      : if (is_present "rock" && is_carried "flint") {
         : if (is_present "dry_branch") {
            : swap o1 = "dry_branch" o2 = "burning_torch";
            : add var ="score" value = "5"; 
            : print "You strike the rock with the flint until the sparks light the branch. It's now burning with a bright flame that makes a good <torch<13>>.";
            : print "[[Your score has gone up by 5 points.]]";
            : done;
         }
         : else {
            : print "You strike the rock with the flint and it gives off sparks.";
            : done;
         }
      }
      : if (is_present "rock") {
         : print "You hit the rock with your hand. Ouch!";
         : done;
      }
   }
// Tin box
   : match "examine box" {
      : if (is_present "tin_box") {
         : append "It's dark grey and dusty from the ashes. ";
         : if (is_box_open) {
            :if (has_not_created "silver_key" && has_not_created "parchment") {
               : print "It contains a silver <key<13>> and a <parchment<13>>.";
               : done;
            }
            :if (has_not_created "silver_key") {
               : print "It contains a silver <key<13>>.";
               : done;
            }
            :if (has_not_created "parchment") {
               : print "It contains a <parchment<13>>.";
               : done;
            }
            : print "It's empty.";
            : done;
         }
         : else {
            : print "It's closed.";
            : done;
         }
      }
   }
   : match "open box" {
      : if (is_present "tin_box" && is_box_open) {
         : print "It's already open.";
         : done;
      }
      : set_true "is_box_open";
      :if (has_not_created "silver_key" && has_not_created "parchment") {
         : print "It contains a silver <key<13>> and a <parchment<13>>.";
         : done;
      }
      :if (has_not_created "silver_key") {
         : print "It contains a silver <key<13>>.";
         : done;
      }
      :if (has_not_created "parchment") {
         : print "It contains a <parchment<13>>.";
         : done;
      }
      : print "It's empty.";
      : done;
   }
   : match "close box" {
      : if (is_present "tin_box" && !is_box_open) {
         : print "It's already closed.";
         : done;
      }
      : set_false "is_box_open";
      : print "It's now closed.";
      : done;
   }
// Key
   : match "examine key" {
      : if (is_present "silver_key" || (is_present "tin_box" && is_box_open && has_not_created "silver_key")) {
         : print "It looks like it's made of silver.";
         : done;
      }
   }
   : match "get key" {
      : if (is_present "tin_box" && is_box_open && has_not_created "silver_key") {
         : if (items_carried() < item_limit()) {
               : pocket "silver_key";
               : print "You take the <key<13>> out of the tin <box<13>>.";
               : done;
         }
         : else {
            : print "You can't carry any more.";
            : done;
         }
      }
   }
// Parchment
   : match "examine parchment" {
      : if (is_present "parchment" || (is_present "tin_box" && is_box_open && has_not_created "parchment")) {
         : print "It's dry and brittle and slightly singed around the edges.";
         : done;
      }
   }
   : match "read parchment" {
      : if (is_present "parchment" || (is_present "tin_box" && is_box_open && has_not_created "parchment")) {
         : print "^n^\"I am better than God\nAnd worse than the devil.\nPoor people have me\nAnd rich people don't.\nIf you eat me, you die.\nWhat am I?\"^m^";
         : if (!has_read_parchment) {
            : set_true "has_read_parchment";
            : print "Perhaps this refers to a magic word, as you feel a sense of power running through your veins.";
         }
         : done;
      }
   }
   : match "get parchment" {
      : if (is_present "tin_box" && is_box_open && has_not_created "parchment") {
         : if (items_carried() < item_limit()) {
               : pocket "parchment";
               : print "You take the <parchment<13>> out of the tin <box<13>>.";
               : done;
         }
         : else {
            : print "You can't carry any more.";
            : done;
         }
      }
   }
   : match "light parchment" {
      : if (is_present "parchment" || (is_present "tin_box" && is_box_open && has_not_created "parchment")) {
         : if (is_present "burning_torch") {
            : print "You'd better not. It might be important.";
            : done;
         }
         : else {
            : print {("You don't have anything to " + original_verb() + " it with.")}
            : done;
         }
      }
   }
// Scroll (singular)
   : match "examine scroll;read scroll" {
      : if (is_present "magic_scrolls" || (is_at "room07" && is_chest_open && has_not_created "magic_scrolls")) {
         : print "There's more than one.";
         : done;
      }
   }
   : match "get scroll" {
      : if (is_at "room07" && is_chest_open && has_not_created "magic_scrolls") {
            : print "There's more than one. You should take them all.";
            : done;
      }
   }
   : match "light scroll;light scrolls" {
      : if (is_present "magic_scrolls" || (is_at "room07" && is_chest_open && has_not_created "magic_scrolls")) {
         : if (is_present "burning_torch") {
            : print "Are you crazy? You didn't come all this way to destroy the magic you seek.";
            : done;
         }
         : else {
            : print {("You don't have anything to " + original_verb() + " it with.")}
            : done;
         }
      }
   }
// Scrolls (plural)
   : match "examine scrolls" {
      : if (is_present "magic_scrolls" || (is_at "room07" && is_chest_open && has_not_created "magic_scrolls")) {
         : print "They look very old. Perhaps you should read them.";
         : done;
      }
   }
   : match "read scrolls" {
      : if (is_present "magic_scrolls" || (is_at "room07" && is_chest_open && has_not_created "magic_scrolls")) {
         : print "You read a few and realise that these are magic scrolls that record the spells from generations of sorcerers and wizards. This is worth more than any amount of gold and jewels.";
         : done;
      }
   }
   : match "get scrolls" {
      : if (is_at "room07" && is_chest_open && has_not_created "magic_scrolls") {
         : if (items_carried() < item_limit()) {
               : pocket "magic_scrolls";
               : print "You've found the magic you seek! Now take the scrolls back to the boat before the troll wakes up.";
               : done;
         }
         : else {
            : print "You can't carry any more.";
            : done;
         }
      }
   }
// Miscellaneous commands
   : match "dance _" {
      : print "You do a little jig and nearly trip over.";
      : done;
   }
   : match "jump -" {
      : print "You jump on the spot.";
      : done;
   }
   : match "jump *" {
      : print "You can't jump over that.";
   }
   : match "listen _" {
      : print "You don't hear anything out of the ordinary.";
      : done;
   }
   : match "move _" {
      : print "Try PUSH or PULL.";
      : done;
   }
   : match "pray _" {
      : print "\"Our father, who art in heaven, hallowed be thy name. Thy kingdom...\" Er, you forget the rest.";
      : done;
   }
   : match "say -" {
      : print "You have nothing to say.";
      : done;
   }
   : match "say _" {
      : print {("You say \"" + original_noun1() + "\", but nothing happens.")}
      : done;
   }
   : match "scream _" {
      : print "\"Yahoooo!\"";
      : done;
   }
   : match "show _" {
      : print "There's no one to show it to.";
      : done;
   }
   : match "sing _" {
      : print "\"Tra la la la!\" Dame Nellie Melba, eat your heart out.";
      : done;
   }
   : match "sleep _" {
      : print "Not now, there's magic to be found. Maybe later.";
      : done;
   }
   : match "smell _" {
      : print "You don't smell anything out of the ordinary.";
      : done;
   }
   : match "swim _" {
      : if (!is_at "room01") {
         : print "It's a bit dry for swimming here. Maybe back at the lake?";
         : done;
      }
   }
   : match "talk -" {
      : print "You talk to yourself, but it's a one-sided conversation.";
      : done;
   }
   : match "talk *" {
      : print "There's no response.";
      : done;
   }
   : match "think _" {
      : print "Don't think too hard. You might break something.";
      : done;
   }
   : match "throw -" {
      : print "What do you want to throw?";
      : done;
   }
   : match "throw *" {
      : drop quiet = "true" ;
      : print {("You throw like a girl. The " + original_noun1() + " doesn't go far.")}
      : done;
   }
   : match "touch _" {
      : print "Ooh, getting all touchy, feely, are we?";
      : done;
   }
   : match "wait -;z -" {
      : print "Time passes...";
      : done;
   }
   : match "xyzzy -" {
      : print {("You say \"" + original_verb() + "\", but nothing happens. I think you're in the wrong adventure.")}
      : done;
   }
// Meta commands
   : match "about -;credits -;info -" {
      : decrement "turns";
      : print "This game was written for the Adventuron CaveJam which ran from 31 August to 23 September 2019. The rules were defined at https://itch.io/jam/cavejam.\nAdventuron and the game skeleton were written by <Chris Ainsley<13>>. The font was designed by <Fergus McNeill<13>>. Game design, coding and graphics were done by <Garry Francis<13>>. Play testing was done by <Chris Ainsley<13>>, <Gareth Pitchford<13>> and <Omid Haghgoo<13>> (alias <Pixelman<13>>). Thanks to all of you. ";
      : done;
   }
   : match "help -" {
      : decrement "turns";
      : clear_screen;
      : print "Use one-word commands (like <SLEEP<13>>) or two-word commands consisting of a verb followed by a noun (like <CHOP TREE<13>>).\nHere's some common commands (with abbreviations in brackets):\nUse <GO NORTH<13>>, <GO SOUTH<13>>, <GO EAST<13>>, <GO WEST<13>>, <GO UP<13>>, <GO DOWN<13>> (<N<13>>, <S<13>>, <E<13>>, <W<13>>, <U<13>>, <D<13>>), <ENTER<13>> or <CLIMB<13>> to move around.\nUse <EXAMINE<13>> (<X<13>>) to get more information about an object.\nUse <GET<13>> or <TAKE<13>> to pick up an object.\nUse <DROP<13>> or <DISCARD<13>> to drop an object.\nUse <INVENTORY<13>> (<I<13>>) to see what you're carrying.\nUse <LOOK<13>> (<L<13>>) to redisplay the room description.";
      : print "^ri^Press <any key<13>> to continue";
      : press_any_key;
      : clear_screen;
      : print "Use <OPEN<13>>, <CLOSE<13>>, <LIGHT<13>>, <EAT<13>>, <DRINK<13>>, <READ<13>>, <SEARCH<13>>, <THROW<13>>, <HIT<13>> and anything else that seems appropriate for the situation.\nUse <TALK<13>>, <ASK<13>>, <GIVE<13>>, <ATTACK<13>>, <KISS<13>> and many others to deal with other characters.\nUse <WAIT<13>> (<Z<13>>) to pass time.\nUse <SCORE<13>> to see your progress.\nUse <SAVE<13>> to save the game.\nUse <LOAD<13>> or <RESTORE<13>> to restore a saved game.\nUse <QUIT<13>> (<Q<13>>) or <RESTART<13>> to start again.\nUse <VERSION<13>> to get version info.\nThere are many other verbs you can use and most verbs have synonyms. If something doesn't work, just experiment and try something else.";
      : print "^ri^Press <any key<13>> to continue";
      : press_any_key;
      : redescribe;
   }
   : match "inventory -" {
      : decrement "turns";
      : inventory;
   }
   : match "load -;restore -" {
      : decrement "turns";
      : load;
   }
   : match "look -" {
      : decrement "turns";
      : redescribe;
   }
   : match "save -" {
      : decrement "turns";
      : save;
   }
   : match "score -"  {
      : decrement "turns";
      : if (turns == 1) {
         : print {("You have scored " + score + " points in " + turns + " turn.")}
         : done;
      }
      : else {
         : print {("You have scored " + score + " points in " + turns + " turns.")}
         : done;
      }
   }
   : match "version -" {
      : decrement "turns";
      : gosub subroutine = "version";
      : done;
   }
}

######################################
# on_tick
######################################
on_tick {
   : increment "turns";
   : if (is_just_entered() && turns == 1) {
      : gosub subroutine = "version";
      : print "Enter <ABOUT<13>> to find out more about this game or <HELP<13>> to see a list of useful commands.";
   }
   : if (is_at "room04" && is_present "ugly_troll" && chance (30)) {
      : execute_one_at_random {
         : print "The <troll<13>> scratches his crutch.";
         : print "The <troll<13>> burps. \"Pardon me.\"";
         : print "The <troll<13>>'s stomach rumbles.";
         : print "The <troll<13>> picks something out of his teeth.";
         : print "The <troll<13>> adjusts his <pouch<13>>.";
         : print "The <troll<13>> looks up at the sky, then looks back at you.";
         : print "The <troll<13>> asks, \"You gonna stand there all day?\"";
         : print "The <troll<13>> picks his nose, rolls it around in his fingers, then swallows it. Oooh, gross!";
         : print "The <troll<13>> says, \"What you want?\"";
         : print "The <troll<13>> says, \"Wizard not home. Go away.\"";
      }
   }
}

######################################
# on_describe
######################################
on_describe {
   : if (is_door_created) {
      : set_false "is_door_created";
      : print "You say \"nothing\" and a crack appears in the northern wall. It looks like the <outline<13>> of a <door<13>>.";
   }
   : if (is_door_opened) {
      : set_false "is_door_opened";
      : print "The rock <door<13>> creaks open to reveal a dark passage beyond.";
      : print "[[Your score has gone up by 5 points.]]";
   }
   : if (is_chest_opened) {
      : set_false "is_chest_opened";
      : if (is_exists "magic_scrolls") {
         : print "The <chest<13>> is empty.";
      }
      : else {
         : print "The <chest<13>> contains a stack of old <scrolls<13>>. ";
      }
   }
   : if (is_chest_closed) {
      : set_false "is_chest_closed";
      : print "It's now closed.";
   }
}

######################################
# subroutines
######################################
subroutines {
   version : subroutine {
      : print "^n^Seeker of Magic\nVersion 1.0.0\nCopyright © 2019 Garry Francis\nCompiled with Adventuron version 1.0.0 Beta 6^m^";
      : return;
   }
}

######################################
# themes
######################################
themes {
   my_theme : theme {
      layout = G D X O
      colors {
         exit_list_header_pen = 6
         exit_list_item_pen = 15
         exit_list_punctuation_pen = 15
         header_bar_paper = 15
         header_bar_pen = 0
         prompt_pen = 15
         response_pen = 15
         story_pen = 15
         textbox_pen = 12
         yousee_header_pen = 3
         yousee_item_pen = 15
         yousee_item_punctuation_pen = 15
      }
      font = delta_10
      header_layout {
         : header_text;
         : dynamic_text "header_score";
      }
      lister_exits {
         exit_list_capitalization = lower
         experimental_enable_direction_arrows = false
         is_show_blocked_exits = false
      }
      lister_inventory {
         item_capitalization = original
         list_type = list
      }
      lister_objects {
         item_capitalization = original
         list_type = single_line
      }
      screen {
         content_width = 256
         paragraph_spacing_multiplier = 0.5
      }
      theme_settings {
         experimental_enable_crt = false
         header_capitalization = original
         // H = Header
         // G = Graphics
         // D = Description
         // X = Exit List
         // O = Object (or entity) List
#         layout = G D X O
      }
      system_messages {
         all_treasures_found_win_game = Congratulations, you found all the treasures. You have won!
         already_in_container = ${entity} is already inside the ${entity2}.
         ask_new_game = Would you like to start a new game?
         ask_quit = Do you wish to quit the game?
         be_more_specific = Please be more specific.\s
         cannot_carry_any_more = You can't carry any more.
         cant_see_one_of_those = You can't see one of those.
         cant_take = You can't take that.
         dont_have_one_of_those = You don't have one of those.
         exit_list_additional_exits_are_located_verbose = Additional exits are located\s
         exit_list_end_text = .
         exit_list_end_text_verbose = .
         exit_list_from_here_you_can_go_verbose = You can go\s
         exit_list_header_concise = Exits:\s
         exit_list_last_sep_verbose = and\s
         exit_list_sep_verbose = ,\s
         exit_list_there_are_no_obvious_exits = There are no obvious exits.
         exit_list_to_the_verbose = to the
         exit_list_you_can_also_go_verbose = You can also go\s
         i_cant_do_that = Not right now.
         inventory_list_empty = nothing
         inventory_list_end_text = .
         inventory_list_final_separator = \sand\s
         inventory_list_header = You're carrying:
         inventory_list_header_verbose = You're carrying\s
         inventory_list_separator = ,\s
         it_is_dark = It's dark. You can't see a thing.
         must_remove_first = Try taking it off first.
         not_carried = You can't ${verb} something you're not carrying.
         not_present = ${entity} is not here.
         nothing_to_get = You look around but can't see any ${noun} anywhere.
         object_list_empty = nothing
         object_list_end_text = .
         object_list_final_separator = \sand\s
         object_list_header = You see:\s
         object_list_header_verbose = You see\s
         object_list_separator = ,\s
         ok = Okay.
         on_drop = You drop ${entity}.
         on_get = You take ${entity}.
         on_put = You put ${entity} inside ${entity2}.
         on_put_non_container = ${entity} is not a container.
         on_put_non_surface = ${entity} is not a surface.
         on_remove = You take off ${entity}.
         on_wear = You put on ${entity}.
         post_quit = You have quit the game.
         prior_prompt = What now?
         prompt = >>
         question_prompt_char = ?
         there_is_nothing_you_can = There is nothing you can ${verb} at the moment.
         treasure_suffix =
         unknown_noun = This game does not require use of the word "${noun}".
         unknown_verb = This game does not require use of the word "${verb}".
         worn_suffix = \s(worn)
         you_already_wear = You're already wearing that.
         you_are_already_carrying = You already have ${entity}.
         you_are_not_holding = You're not holding ${entity}.
         you_cant_go_that_direction = You can't go that way.
         you_cant_wear = You can't wear that.
         you_dont_wear = You're not wearing that.
         you_see_nothing_special = You see nothing special.
      }
   }
}

######################################
# assets
######################################
assets {
// PNGs can be compressed quite nicely using https://squoosh.app/
   graphics {
      loading_screen : base64_png "";
      room01 : base64_png "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";
      room02 : base64_png "";
      room03 : base64_png "";
      room04 : base64_png "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";
      room04a : base64_png "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";
      
      room05 : base64_png "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";
      room06 : base64_png "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";
      room06a : base64_png "";
      room06b : base64_png "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";
      room07 : base64_png "";
      room07a : base64_png "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";
   }
}
